@page "/terminal-management"
@using ProcessPulse.Class.Service
@using ProcessPulse.Class.ProcessPulse.Models
@inject ITerminalService TerminalService

<div class="container my-4">
    <h3 class="mb-3">Terminal Management</h3>

    <button class="btn btn-primary mb-3" @onclick="ShowAddTerminalModal">Add Terminal</button>

    <!-- Modal for adding a new terminal -->
    @if (isAddTerminalModalOpen)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Terminal</h5>
                        <button type="button" class="btn-close" @onclick="HideAddTerminalModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="terminalId" class="form-label">Terminal ID</label>
                            <input class="form-control" id="terminalId" type="text" @bind="newTerminal.TerminalId" placeholder="Terminal ID" />
                        </div>
                        <div class="mb-3">
                            <label for="terminalName" class="form-label">Name</label>
                            <input class="form-control" id="terminalName" type="text" @bind="newTerminal.Name" placeholder="Name" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideAddTerminalModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="AddTerminal">Add</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal for editing a terminal -->
    @if (isEditTerminalModalOpen)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Terminal</h5>
                        <button type="button" class="btn-close" @onclick="HideEditTerminalModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="editTerminalId" class="form-label">Terminal ID</label>
                            <input class="form-control" id="editTerminalId" type="text" @bind="editingTerminal.TerminalId" placeholder="Terminal ID" />
                        </div>
                        <div class="mb-3">
                            <label for="editTerminalName" class="form-label">Name</label>
                            <input class="form-control" id="editTerminalName" type="text" @bind="editingTerminal.Name" placeholder="Name" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideEditTerminalModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="UpdateTerminal">Update</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Terminal Name</th>
                    <th>Process Name </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var terminal in Terminals)
                {
                    <tr>
                        <td>@terminal.Id</td>
                        <td>@terminal.TerminalId</td>
                        <td>@terminal.Name</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowEditTerminalModal(terminal)">Edit</button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTerminal(terminal.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<TerminalMapping> Terminals = new();
    private TerminalMapping editingTerminal = new();
    private TerminalMapping newTerminal = new();
    private bool isAddTerminalModalOpen = false;
    private bool isEditTerminalModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTerminals();
    }

    private void ShowAddTerminalModal()
    {
        isAddTerminalModalOpen = true;
        StateHasChanged();
    }

    private void HideAddTerminalModal()
    {
        isAddTerminalModalOpen = false;
        StateHasChanged();
    }

    private async Task AddTerminal()
    {
        if (!string.IsNullOrWhiteSpace(newTerminal.TerminalId) && !string.IsNullOrWhiteSpace(newTerminal.Name))
        {
            await TerminalService.AddTerminalAsync(newTerminal);
            await RefreshTerminals();
            newTerminal = new TerminalMapping(); 
            HideAddTerminalModal();
        }
    }

    private void ShowEditTerminalModal(TerminalMapping terminal)
    {
        editingTerminal = terminal;
        isEditTerminalModalOpen = true;
        StateHasChanged();
    }

    private void HideEditTerminalModal()
    {
        isEditTerminalModalOpen = false;
        StateHasChanged();
    }

    private async Task UpdateTerminal()
    {
        if (!string.IsNullOrWhiteSpace(editingTerminal.TerminalId) && !string.IsNullOrWhiteSpace(editingTerminal.Name))
        {
            await TerminalService.UpdateTerminalAsync(editingTerminal);
            await RefreshTerminals();
            HideEditTerminalModal();
        }
    }

    private async Task DeleteTerminal(int id)
    {
        await TerminalService.DeleteTerminalAsync(id);
        await RefreshTerminals();
    }

    private async Task RefreshTerminals()
    {
        Terminals = await TerminalService.GetTerminalsAsync();
        StateHasChanged();
    }
}