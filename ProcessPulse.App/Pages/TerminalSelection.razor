@page "/terminal-selection"
@using ProcessPulse.App.Services
@using ProcessPulse.Class.ProcessPulse.Models
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces
@using System.Collections.Generic
@using Plotly.Blazor.Traces.ScatterLib;
@using System.Timers;

@inject ApiService ApiService

<div class="container mt-4">
    <h1>Wybór terminala</h1>

    <!-- Dropdown do wyboru terminala -->
    <div class="mb-3">
        <label for="terminalDropdown" class="form-label">Wybierz terminal:</label>
        <select id="terminalDropdown" class="form-select" @bind="selectedTerminal">
            <option value="Terminal1">Terminal 1</option>
            <option value="DESKTOP-SA4R9OI">Terminal 2</option>
        </select>
    </div>

    <button class="btn btn-primary" @onclick="() => FetchData()">Pobierz dane</button>

    <!-- Wykresy -->
    @if (cpuData.Any() && ramData.Any())
    {
        <div class="container mt-3">
            <div class="row">
                <!-- Karta dla wykresu CPU -->
                <div class="col-md-6 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">CPU Usage (%)</h5>
                            @if (cpuData.Any())
                            {
                                <PlotlyChart Data="@cpuDataConverted" Layout="@cpuLayout" @ref="cpuChart" />
                            }
                            else
                            {
                                <p class="text-muted">Loading chart...</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Karta dla wykresu RAM -->
                <div class="col-md-6 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">RAM Usage (MB)</h5>
                            @if (ramData.Any())
                            {
                                <PlotlyChart Data="@ramDataConverted" Layout="@ramLayout" @ref="ramChart" />
                            }
                            else
                            {
                                <p class="text-muted">Loading chart...</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private string selectedTerminal = "Terminal1";
    private List<ProcessInfo> processInfos = new List<ProcessInfo>();
    private Timer timer;
    private List<Scatter> cpuData = new List<Scatter>();
    private List<ITrace> cpuDataConverted => cpuData.Cast<ITrace>().ToList();
    private Layout cpuLayout = new Layout { Title = new Title { Text = "CPU Usage (%)" } };
    private PlotlyChart cpuChart;
    private PlotlyChart ramChart;
    private List<Scatter> ramData = new List<Scatter>();
    private List<ITrace> ramDataConverted => ramData.Cast<ITrace>().ToList();
    private Layout ramLayout = new Layout { Title = new Title { Text = "RAM Usage (MB)" } };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(15000);
            timer.Elapsed += async (sender, e) => await FetchData();
            timer.Start();
        }
    }

    private async Task FetchData()
    {
        try
        {
            if (ApiService == null)
            {
                Console.WriteLine("ApiService jest null");
                return;
            }

            if (!processInfos.Any())
            {
                processInfos = (await ApiService.GetLastTenRecordsAsync(selectedTerminal)).OrderBy(p => p.Time).ToList();
            }
            else
            {
                var latestProcessInfo = await ApiService.GetProcessAsync(selectedTerminal);
                if (latestProcessInfo != null)
                {
                    processInfos.Add(latestProcessInfo);

                    if (processInfos.Count > 10)
                    {
                        processInfos.RemoveAt(0);
                    }
                }
                else
                {
                    Console.WriteLine("Nie znaleziono nowych informacji o procesie");
                    return;
                }
            }

            await InvokeAsync(() =>
            {
                UpdateChartData();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd: {ex.Message}");
        }
    }
    private Task UpdateChartData()
    {
        var parsedModeFlag = ModeFlag.Lines | ModeFlag.Markers;

        List<object> timePoints = processInfos.Select(p => (object)p.Time.ToString()).ToList();

        cpuData = new List<Scatter>
        {
        new Scatter
        {
            X = timePoints,
            Y = processInfos.Select(p => (object)p.CpuUsage).ToList(),
            Mode = parsedModeFlag,
            Name = "CPU Usage"
        }
        };

        ramData = new List<Scatter>
       {
        new Scatter
        {
            X = timePoints,
            Y = processInfos.Select(p => (object)(p.RamUsage / 1024.0)).ToList(),
            Mode = parsedModeFlag,
            Name = "RAM Usage"
        }
        };
        InvokeAsync(StateHasChanged);
        cpuChart?.Replot(cpuLayout, cpuDataConverted);
        ramChart?.Replot(ramLayout, ramDataConverted);
        return Task.CompletedTask;
    }
}

